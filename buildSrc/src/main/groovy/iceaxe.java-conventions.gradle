plugins {
    id 'java'
    id 'checkstyle'

    id 'com.github.spotbugs'
    id 'com.github.hierynomus.license'
}

group = 'com.tsurugidb.iceaxe'
version = '1.10.0-SNAPSHOT'

ext {
    tsubakuroVersion = '1.10.0-SNAPSHOT'
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

if (hasProperty('mavenLocal')) {
    repositories {
        mavenLocal()
    }
} else {
    repositories {
        maven {
            url 'https://central.sonatype.com/repository/maven-snapshots/'
            content {
                includeGroupByRegex 'com\\.tsurugidb.*'
            }
        }
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 8, 'hours'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

checkstyle {
    def confDir = 'buildSrc/src/main/resources'
    configFile = rootProject.file("$confDir/checkstyle.xml")
    configProperties.suppressionFile = rootProject.file("$confDir/checkstyle-suppressions.xml")
    if ('strict' == findProperty('checkMode')) {
        maxWarnings = 0
    }
}

spotbugsMain {
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
    excludeFilter = rootProject.file('buildSrc/src/main/resources/spotbugsExclude.xml')
}

checkstyleMain.enabled = false
checkstyleTest.enabled = false
spotbugsMain.enabled = false
spotbugsTest.enabled = false

javadoc.failOnError = false

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

jar {
    manifest.attributes (
        'Build-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"),
        'Build-Revision' : System.getenv("GITHUB_SHA") ?: "",
        'Created-By'     : "Gradle ${gradle.gradleVersion}",
        'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}

task showTsubakuroManifest {
    doLast {
        def tsubakuroJar = configurations["compileClasspath"].filter {
            it.name.startsWith("tsubakuro-session")
        }
        def version = resources.text.fromArchiveEntry(tsubakuroJar, "META-INF/MANIFEST.MF")
        print(version.asString())
    }
}

license {
    def confDir = 'buildSrc/src/main/resources'
    header rootProject.file("$confDir/source-header.txt")
    mapping('java', 'SLASHSTAR_STYLE')
    include('**/*.java')
}
